Collections Framework:
    It's a collection of classes and interfaces that help us store and manipulate the data efficiently.
 Why we should use Collections Framework?
    1. It's Flexible (we don't need to provide size beforehand)
    2. It's Dynamic (All the classes can increase and decrease their size at run time)
    3. There are built-in methods to perform common tasks
    4. Pre-built data structures

 Downsides of Collections Framework:
    1. We cannot use primitives data types. We have to use wrapper classes, which occupy 4 times more memory than a primitive
        int num=10 // 4 memory locations        Integer num1=10 // 16 memory locations

 Wrapper:
    Wrapper classes are object types for all the primitive types

  Why Should we learn about the wrapper types?
  1. Because collections framework only supports wrapper types
  2. There are built-in methods to perform common tasks

  Boxing:
  Converting a primitive to its corresponding wrapper type by manually calling methods
  int pnum=10;
  Integer wnum=new Integer(pnum);

  Unboxing:
  Converting a wrapper to a primitive by calling a method
  Integer wnum=new Integer (10);
  int pnum=wnum.intValue;

  AutoUnboxing:
  converting a wrapper to a primitive without calling any methods
  Integer wnum=new Integer(10);
  int pnum=wnum;

  ArrayList Class:
  Classes in a collections framework that allow us to store data, like an array
  Some common methods from this class are: 1. add() 2. remove 3. contains 4. size().

  Iterator:
  It's a mechanism that allows us to iterate and delete data from any class in collections framework.
  it has hasNext() next() remove().

  Why we should learn about Iterator?
  Because loops are not safe when we perform an operation that can change the size of a data structure

  ArrayList vs LinkedList
    ArrayList: uses an array behind the scenes to store the data. We should use an ArrayList when we are retrieving
            the data most of the time and not insert the data in the start or in-between if we have to shift the data.
    LinkedList: LinkedList doesn't store the data in consecutive memory locations. That is why it's easier to insert
                and remove the data from anywhere in a list.
                If you are going to maniputale the data (shifting of elements) always use Linked List.

     If most of the time you use add or remove method, then use linkedList.
     If most of the time you use get method, use ArryList.

Sets:
    Set is a Collection that can't contain duplicate elements. There are 3 main implementation of Set Interface:
        1. HashSet
        2. LinkedHashSet
        3. TreeSet


